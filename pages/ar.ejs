<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AR Car Viewer</title>
    <style>
        body {
            margin: 0;
        }

        #ar-canvas {
            display: block;
            width: 100%;
            height: 100vh;
        }
    </style>
</head>

<body>
    <canvas id="ar-canvas"></canvas>
    <script type="module">
        import * as THREE from 'https://cdn.skypack.dev/three@0.132.2/build/three.module.js';
        import { GLTFLoader } from 'https://cdn.skypack.dev/three@0.132.2/examples/jsm/loaders/GLTFLoader.js';
        import { VRButton } from 'https://cdn.skypack.dev/three@0.132.2/examples/jsm/webxr/VRButton.js';
        import { ARButton } from 'https://cdn.skypack.dev/three@0.132.2/examples/jsm/webxr/ARButton.js';

        // Detect if AR is supported
        if (navigator.xr && 'supportsSession' in navigator.xr) {
            navigator.xr.supportsSession('immersive-ar').then(() => {
                // AR is supported
                initAR();
            }).catch((e) => {

                // AR not supported, display a message or handle gracefully
                document.body.innerHTML = e + "<p>AR is not supported on this device.</p>";
            });
        } else {
            // WebXR API not available, display a message or handle gracefully
            document.body.innerHTML = e + "<p>WebXR API is not available on this browser.</p>";
        }

        let camera, scene, renderer;

        function initAR() {
            const canvas = document.querySelector('#ar-canvas');
            scene = new THREE.Scene();

            camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 20);

            renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.xr.enabled = true;
            document.body.appendChild(ARButton.createButton(renderer));

            // Add some lighting
            const ambientLight = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);
            scene.add(ambientLight);

            // Load a GLTF model
            const loader = new GLTFLoader();
            loader.load('model/streetch.glb', (gltf) => {
                const model = gltf.scene;
                // Set the scale of the model to be visible
                model.scale.set(1, 1, 1);
                // Position the model in front of the camera
                model.position.set(0, 0, -5);
                // Rotate the model to face the camera
                model.rotation.set(0, Math.PI, 0);
                scene.add(model);
            }, undefined, function (error) {
                console.error('An error happened while loading the model:', error);
                alert(error)
            });

            renderer.setAnimationLoop(render);
        }

        function render(timestamp, frame) {
            renderer.render(scene, camera);
        }
    </script>
</body>

</html>