<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Streetch - Homepage</title>
    <link rel="icon" href="/Streetch-icon.svg">
    <meta charset="UTF-8">
    <meta name="description" content="Streetch. The first motor assisted and autonomous Stretcher.">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            margin: 0;
        }

        #c {
            display: block;
            width: 100%;
            height: 100vh;
        }
    </style>
</head>

<body>
    <canvas id="c"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>
    <script type="module">
        import { FontLoader, TextGeometry } from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js';


        let scene, camera, renderer, controls;

        function init() {
            // Scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0xdddddd);

            // Camera
            camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(350, 100, -15);
            camera.zoom *= 0.4;
            camera.updateProjectionMatrix();

            // Background
            scene.background = new THREE.Color(0x000000); // Very pale sky blue



            // Renderer
            renderer = new THREE.WebGLRenderer({ canvas: document.querySelector("#c"), antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            document.body.appendChild(renderer.domElement);

            // Lighting
            const ambientLight = new THREE.AmbientLight(0x404040, 4); // Soft overall light with increased intensity
            scene.add(ambientLight);

            const lightAbove = new THREE.DirectionalLight(0xffffff, 2);
            lightAbove.position.set(0, 5, 0); // Position the light above the model
            scene.add(lightAbove);

            const lightBelow = new THREE.DirectionalLight(0xffffff, 1);
            lightBelow.position.set(0, -5, 0); // Position the light below the model
            scene.add(lightBelow);

            const lightFront = new THREE.DirectionalLight(0xffffff, 1);
            lightFront.position.set(0, 0, 5);
            scene.add(lightFront);

            // Light behind the model
            const lightBack = new THREE.DirectionalLight(0xffffff, 1);
            lightBack.position.set(0, 0, -5);
            scene.add(lightBack);

            const lightLeft = new THREE.DirectionalLight(0xffffff, 1.5);
            lightLeft.position.set(-5, 0, 0);
            scene.add(lightLeft);

            // Light to the right side of the model
            const lightRight = new THREE.DirectionalLight(0xffffff, 1.5);
            lightRight.position.set(5, 0, 0);
            scene.add(lightRight);

            // GLTF Loader
            const gltfLoader = new THREE.GLTFLoader();
            gltfLoader.load('model/streetch.glb', function (gltf) {
                const model = gltf.scene;
                scene.add(model);
            }, undefined, function (error) {
                console.error(error);
            });

            // Logo
            const textureLoader = new THREE.TextureLoader();
            textureLoader.load('Streetch.svg', function (texture) {
                texture.minFilter = THREE.LinearFilter; // Improve texture quality

                const aspectRatio = 1.6; // Replace with your image's actual aspect ratio
                const logoWidth = 100;
                const logoHeight = logoWidth / aspectRatio;

                const logoMaterial = new THREE.MeshBasicMaterial({
                    map: texture,
                    transparent: true, // Assuming the SVG has a transparent background
                    side: THREE.DoubleSide
                });

                const logoGeometry = new THREE.PlaneGeometry(logoWidth, logoHeight);
                const logoMesh = new THREE.Mesh(logoGeometry, logoMaterial);
                logoMesh.position.set(-10, 100, -20); // Adjust position accordingly
                logoMesh.rotation.y = Math.PI / 2; // Rotate 90 degrees around the Y axis
                scene.add(logoMesh);
            });

            textureLoader.load(
                'target.svg', // path to file
                function (texture) {
                    texture.minFilter = THREE.LinearFilter; // Improve texture quality

                    const aspectRatio = 1; // Replace with your image's actual aspect ratio
                    const logoWidth = 150;
                    const logoHeight = logoWidth / aspectRatio;

                    const logoMaterial = new THREE.MeshBasicMaterial({
                        map: texture,
                        transparent: true, // Assuming the SVG has a transparent background
                        side: THREE.DoubleSide
                    });

                    const logoGeometry = new THREE.PlaneGeometry(logoWidth, logoHeight);
                    const logoMesh = new THREE.Mesh(logoGeometry, logoMaterial);
                    logoMesh.position.set(6, -20, -187); // Adjust position accordingly
                    logoMesh.rotation.x = Math.PI / 2; // Rotate 90 degrees around the Y axis
                    scene.add(logoMesh);
                },
                undefined, // onProgress callback not supported from within three.js
                function (err) {
                    console.error('An error happened during loading the texture.');
                }
            );

            const loader = new FontLoader();
            loader.load('noto-json/regular.json', function (font) {
                const size = 14;
                const height = 2;
                const curveSegments = 12;
                const text = 'Streetch is a motor-assisted and autonomous Stretcher designed to assist Paramedics in Emergency Situations. Our IMECHE Vehicle is a medium fidelity prototype of this long term vision, being able to detect obstacles and coloured targets.';
                const lines = createMultilineText(text, 300, font, size, height, curveSegments); // 700 is the max width in units

                lines.forEach((line, index) => {
                    const geometry = new TextGeometry(line, {
                        font: font,
                        size: size,
                        height: height,
                        curveSegments: curveSegments
                    });

                    const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
                    const textMesh = new THREE.Mesh(geometry, material);
                    textMesh.position.set(0, 150 - (index * 20), 350); // Adjust position, 50 is line height
                    textMesh.rotation.y = Math.PI / 2;
                    scene.add(textMesh);
                });
            });

            function createMultilineText(text, maxWidth, font, size, height, curveSegments) {
                const words = text.split(' ');
                let line = '';
                let lines = [];

                words.forEach(word => {
                    let testLine = line + word + ' ';
                    let geometry = new THREE.TextGeometry(testLine, {
                        font: font,
                        size: size,
                        height: height,
                        curveSegments: curveSegments
                    });

                    // Compute the bounding box
                    geometry.computeBoundingBox();

                    let testWidth = geometry.boundingBox.max.x;

                    if (testWidth > maxWidth && line !== '') {
                        lines.push(line);
                        line = word + ' ';
                    } else {
                        line = testLine;
                    }

                    // Dispose of geometry after measuring to avoid memory leak
                    geometry.dispose();
                });

                lines.push(line); // Push the last line

                return lines;
            }


            // Controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
            controls.dampingFactor = 0.25;
            controls.screenSpacePanning = false;

            // Resize Handler
            window.addEventListener('resize', onWindowResize, false);

            animate();
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true
            render();
        }

        function render() {
            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        init();
    </script>

    <button id="BOMButton" title="Open Bill of Materials">
        <img src="bom.svg" alt="AR Icon" />
    </button>

    <button id="VIDEOButton" title="Open Presentation Video">
        <img src="video.svg" alt="AR Icon" />
    </button>


    <div id="credit-text">Â© A Project by Lorenzo Satta Chiris and Thomas Malins</div>

    <style>
        #credit-text {
            position: fixed;
            bottom: 10px;
            left: 10px;
            font-style: italic;
            font-size: small;
            color: white;
            font-family: "noto-ttf/regular", Arial, sans-serif;
        }
    </style>

    <style>
        body {
            overflow: hidden;
        }

        #BOMButton {
            position: fixed;
            bottom: 30px;
            right: 85px;
            width: 64px;
            height: 64px;
            border: none;
            border-radius: 50%;
            background: none;
            cursor: pointer;
            outline: none;
        }

        #VIDEOButton {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 64px;
            height: 64px;
            border: none;
            border-radius: 50%;
            background: none;
            cursor: pointer;
            outline: none;
        }

        #ARButton img,
        #BOMButton img,
        #VIDEOButton img {
            width: 40px;
            height: 40px;
        }
    </style>

    <script>
        document.getElementById('BOMButton').addEventListener('click', function () {
            window.open('https://lsattachiris.notion.site/IMECHE-STREETCH-BOM-975d8fde7d7a442c84cb670cf4722836?pvs=4', '_blank');
        });
        document.getElementById('VIDEOButton').addEventListener('click', function () {
            window.open('https://lsattachiris.notion.site/IMECHE-STREETCH-BOM-975d8fde7d7a442c84cb670cf4722836?pvs=4', '_blank');
        });
    </script>
</body>

</html>